Варианты промежуточных точек:
1. Траектория не должна проходить через число A
  В проверку на неподходящую траекторию добавляем запись
  if x > y or x == A: return 0
2. Траектория должна проходить через число A
  В самом конце при вызове функции для дачи ответа добавляем запись
  print(f(1, A) * f(A, 20)), где 1 начальная точка, 20 - конечная

Варианты действий в проверке на неподходящую траекторию:
1. На увеличение числа
  if x > y: return 0
2. На уменьшение числа
  if x < y: return 0


==========================================================================

Пример 1:
Исполнитель преобразует число на экране. У исполнителя есть три команды, которые обозначены латинскими буквами:
А. Вычесть 1
В. Вычесть 3
С. Найти целую часть от деления на 2
Программа для исполнителя — это последовательность команд.
Сколько существует программ, для которых при исходном числе 19 результатом является число 3, при этом траектория вычислений не содержит числа 7 и содержит 10?

Решение 1:
  def f(x, y):
     if x == y: return 1
     if x < y or x == 7: return 0
     return f(x - 1, y) + f(x - 3, y) + f(x // 2, y)
  print(f(19, 10) * f(10, 3))

Пример 2:
Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:
A. Прибавить 2
B. Прибавить 3
C. Умножить на 2
Программа для исполнителя – это последовательность команд.
Сколько существует программ, для которых при исходном числе 3 результатом является число 25, и при этом траектория вычислений содержит число 10 и не содержит 17?
Решение 2:
  def f(x, y):
     if x == y: return 1
     if x > y or x == 17: return 0
     return f(x + 2, y) + f(x + 3, y) + f(x * 2, y)
  print(f(3, 10) * f(10, 25))