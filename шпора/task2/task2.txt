Порядок выполнения операций в алгебре логики:
1. Инверсия (A, ¬A, (not A))
2. Конъюнкция (A∧B, A∙B, A and B)
3. Дизъюнкция (A∨B, A+B, A or B)
4. Импликация (A→B, A<=B)
5. Эквивалентность (A≡B, A==B)
Порядок выполнения операция в Python:
1. Базовые логические операции (<, >, <=, >=, ==,  !=)
2. Инверсия (A, ¬A, (not A))
3. Конъюнкция (A∧B, A∙B, A and B)
4. Дизъюнкция (A∨B, A+B, A or B)

Пример:
АЛ: A ≡ B ∧ C → D
Python: A == ((B and C) <= D)

===========================================================

Обычный код:
print('x y z w')
for x in 0,1:
  for y in 0,1:
       for z in 0,1:
           for w in 0,1:
               f = логическое выражение
               if f: # если нужны истинные значения
                   print(x,y,z,w)
               if not f: # если нужны ложные значения
                   print(x,y,z,w)

============================================================

Крутой код:
from itertools import permutations, product
def f(x, y, z, w):
   return # логическое выражение
# кол-во переменных и repeat зависит
# от кол-ва пустых ячеек в таблице
for a1, a2, a3 in product([0, 1], repeat=3):
   table = [переписываем все строки из таблицы в кортежи]
   if len(table) == len(set(table)):
       for p in permutations('xyzw'):
           u = [f(**dict(zip(p, t))) for t in table] == [столбец F]
           if u:
               print(*p)